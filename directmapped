#ifndef directmapped_H_
#define directmapped_H_

#include <iostream>
#include<ostream>
#include<fstream>

#include <iomanip>
#include<cmath>
#include<cstdlib>
#include <string.h>
#include<stdio.h>
#include "Conversion.hh"

#include "CACHEBLOCKSTRUCTURE.hh"
using namespace std;
class DM {
private:
	int BS, CB, MMB, WS;
	int (&A)[16];
public:
	DM(int BS, int CB, int MMB, int WS, int (&A)[16]):BS(BS),CB(CB),MMB(MMB),WS(WS),A(A){}

	int directmapped (){
	int total = 16;
	struct cache_block cfp[CB];
	int count_hit=0;
	int count_miss=0;
	int index;
	int x=0;
	int blocksize = BS * WS;
	int offset = log(blocksize)/log(2);

while (x<total)
{
char *bword;
char *Badd;
char *Btag;

int i,z;
int j;
Badd=(char*) malloc((7-offset)*(sizeof(char)));
bword = d2b(A[x]);
for (i=(7-offset); i>0; i--)
{
	Badd[i-1] = bword[i-1];
}
index = (int)(log((double)CB)/log((double)2));




	Btag= (char*)malloc((7-offset-index)*sizeof(char));

	for (j=7-offset-index; j>0; j--)
	{
		Btag[j-1] = Badd[j-1];

	}


	z=b2d(&Badd[7-offset-index]);


	if (cfp[z].vld == 1 && strcmp(cfp[z].tag,Btag)== 0) 
	{

		count_hit++;
	}
	else 
	{

		count_miss++;
		cfp[z].vld = 1;
		cfp[z].tag = strdup(Btag);
	}
cout <<"MEMADD:"<<A[x]<<" "<<"Block add: "<<Badd<<" "<<"Tag:"<<" "<<Btag<<" "<<"Index :"<<&Badd[7-offset-index]<<" "<<"MISS: "<<count_miss<<" "<<"HIT: "<< count_hit <<"\n";



	
free(Badd);
free(Btag);
x++;
}
cout <<"Direct Mapped:  "<<"MISS: "<<count_miss<<"\t"<<"HIT: "<< count_hit <<"\n";

}

};
#endif

