

#ifndef fullyassociativity_H_
#define fullyassociativity_H_


#include <iostream>

#include <iomanip>
#include<cmath>
#include<cstdlib>
#include <string.h>
#include "Conversion.hh"

#include "CACHEBLOCKSTRUCTURE.hh"

using namespace std;
class FA {
private:
	int BS, CB, MMB, WS;
		int (&A)[16];
public:
	FA(int BS, int CB, int MMB, int WS, int (&A)[16]):BS(BS),CB(CB),MMB(MMB),WS(WS),A(A){}
	int fullassociativity(){
			int total = 16;
	struct cache_block cfp[CB];
	int count_hit=0;
	int count_miss=0;
	int index;
	int x=0;
	int blocksize = BS * WS;
	int offset = log(blocksize)/log(2);

while (x<total)
{
char *bword;
char *Badd;
char *Btag;

int i,z;
int j;
Badd=(char*) malloc((7-offset)*(sizeof(char)));
bword = d2b(A[x]);
for (i=(7-offset); i>0; i--)
{
	Badd[i-1] = bword[i-1];
}
	//fully associative 	
		index = 0;

	Btag=(char*) malloc((7-offset-index)*sizeof(char));

	for (j=7-offset-index; j>0; j--)
	{
		Btag[j-1] = Badd[j-1];

	}

int s=0,p=90,lowindex,tag_found=0;
for(s=0;s<CB;s++)

{
if (cfp[s].vld != 1 )
	{
		lowindex =s;
		break;
	}

else if (strcmp(cfp[s].tag,Btag)== 0) 
	{

		tag_found=1;
		lowindex =s;
		break;
	}
else if(cfp[s].lru < p)
	{
		p = cfp[s].lru;
		lowindex =s;

	}

}
if (tag_found == 1)
{
count_hit++ ;
cfp[lowindex].lru++;
}
else 
{
count_miss++;
cfp[lowindex].vld = 1;
cfp[lowindex].tag = strdup(Btag);
cfp[lowindex].lru =1 ;
	
}
cout <<"MEMADD:"<<A[x]<<" "<<"Block add: "<<Badd<<" "<<"Tag:"<<" "<<Btag<<" "<<"Index :"<<&Badd[7-offset-index]<<" "<<"MISS: "<<count_miss<<" "<<"HIT: "<< count_hit <<"\n";



free(Badd);
free(Btag);
x++;
}
cout <<"Full associative :  "<<"MISS: "<<count_miss<<"\t"<<"HIT: "<< count_hit <<"\n";

}
};

#endif

